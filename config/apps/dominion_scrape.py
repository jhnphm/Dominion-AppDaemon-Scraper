#! /usr/bin/python
# Generated by Selenium IDE
import time
import sys
import os
import enum
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service

class ScrapeFormat(enum.Enum):
    XLSX=0
    XML=1

class Scraper:
    def __init__(self, email: str, password: str, format: ScrapeFormat, download_dir: str):
        self.email = email
        self.password = password
        self.format = format
        self.download_dir = download_dir

    def run(self):
        # Setup firefox
        options = Options()
        options.set_preference("browser.download.folderList", 2)
        options.set_preference("browser.download.manager.showWhenStarting", False)
        options.set_preference("browser.download.dir", self.download_dir)
        options.add_argument("--headless")

        service = Service()
        self.driver = webdriver.Firefox(options=options, service=service)

        # Set start page
        self.driver.get(
            "https://login.dominionenergy.com/CommonLogin?SelectedAppName=electric"
        )
        self.driver.set_window_size(1762, 1923)

        self.driver.find_element(By.CSS_SELECTOR, "html").click()

        self.driver.implicitly_wait(50)
        wait = WebDriverWait(self.driver, 50)

        # Login
        selector = (By.CSS_SELECTOR, "input[name='username'][id]")
        wait.until(EC.element_to_be_clickable(selector))
        username_field = self.driver.find_element(*selector)
        username_field.click()
        username_field.send_keys(self.email)

        selector = By.CSS_SELECTOR, "input[name='password'][id]"
        wait.until(EC.element_to_be_clickable(selector))
        password_field = self.driver.find_element(*selector)
        password_field.click()
        password_field.send_keys(self.password)

        selector = (By.CSS_SELECTOR, "#gigya-login-form .gigya-input-submit")
        wait.until(EC.element_to_be_clickable(selector))
        self.driver.find_element(*selector).click()

        # Setup wait for loading overlay
        def wait_loading_bg():
            loaders = self.driver.find_elements(By.CSS_SELECTOR, "div.loading-bg")
            for i in loaders:
                wait.until(EC.invisibility_of_element(i))

        # Click view usage
        selector = (By.LINK_TEXT, "View Your Usage")
        wait_loading_bg()
        wait.until(EC.element_to_be_clickable(selector))
        wait_loading_bg()
        view_usage = self.driver.find_element(*selector)
        view_usage.click()

        ## Apparently green button download will download all data ever, regardless of selection
        ## CSV has more granularity than green button
        # Select daily stats
        selector = (By.CSS_SELECTOR, "#id7 + div")
        wait_loading_bg()
        wait.until(EC.element_to_be_clickable(selector))
        wait_loading_bg()
        daily_sel = self.driver.find_element(*selector)
        daily_sel.click()

        if self.format == ScrapeFormat.XLSX:
            selector = (By.PARTIAL_LINK_TEXT, "Download 30-minute Data")
        else:
            selector = (By.LINK_TEXT, "Green Button")
        wait_loading_bg()
        wait.until(EC.element_to_be_clickable(selector))
        wait_loading_bg()
        self.driver.find_element(*selector).click()

        time.sleep(30)

        self.driver.quit()


if __name__ == "__main__":
    Scraper(email=sys.argv[1], password=sys.argv[2], format=ScrapeFormat.XLSX, download_dir=os.getcwd()).run()
